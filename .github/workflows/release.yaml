name: "Release"

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version update type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Read current version
        id: read_version
        run: |
          CURRENT_VERSION=$(grep '"version":' src-tauri/tauri.conf.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.read_version.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate new version based on type
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (from $CURRENT_VERSION via $VERSION_TYPE)"

      - name: Update tauri.conf.json version (for build only)
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i.tmp "s/\"version\": *\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" src-tauri/tauri.conf.json
          rm -f src-tauri/tauri.conf.json.tmp
          echo "Updated version to: $NEW_VERSION (for build only)"
          
          # Verify the change
          grep '"version":' src-tauri/tauri.conf.json

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12

          security delete-keychain build.keychain 2>/dev/null || true

          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        run: |
          security find-identity -v -p codesigning build.keychain
          CERT_ID=$(security find-identity -v -p codesigning build.keychain | awk -F\" '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo CERT_ID: $CERT_ID

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install --frozen-lockfile

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          VITE_POLAR_API_BASE_URL: ${{ env.VITE_POLAR_API_BASE_URL }}
          VITE_POLAR_ORGANIZATION_ID: ${{ env.VITE_POLAR_ORGANIZATION_ID }}
        with:
          projectPath: ./
          tagName: v${{ steps.new_version.outputs.new_version }}
          releaseName: "v${{ steps.new_version.outputs.new_version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  commit-version:
    needs: release-tauri
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if all builds succeeded
        id: check_success
        run: |
          # Check if all matrix jobs succeeded
          if [[ "${{ needs.release-tauri.result }}" == "success" ]]; then
            echo "all_success=true" >> $GITHUB_OUTPUT
            echo "All builds succeeded"
          else
            echo "all_success=false" >> $GITHUB_OUTPUT
            echo "Some builds failed"
          fi

      - name: Read and calculate version (for commit)
        if: steps.check_success.outputs.all_success == 'true'
        id: version_info
        run: |
          CURRENT_VERSION=$(grep '"version":' src-tauri/tauri.conf.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate new version based on type
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version will be updated to: $NEW_VERSION"

      - name: Update version and commit to main
        if: steps.check_success.outputs.all_success == 'true'
        run: |
          NEW_VERSION="${{ steps.version_info.outputs.new_version }}"
          
          # Update version in tauri.conf.json
          sed -i "s/\"version\": *\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" src-tauri/tauri.conf.json
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the updated file
          git add src-tauri/tauri.conf.json
          git commit -m "chore: bump version to v$NEW_VERSION"
          
          # Push to main
          git push origin HEAD:main
          
          echo "Version v$NEW_VERSION committed and pushed to main"

      - name: Report failure (no rollback needed)
        if: steps.check_success.outputs.all_success == 'false'
        run: |
          echo "‚ùå Some builds failed. No version changes were committed."
          echo "The original version remains unchanged in the repository."
